import socket
import threading
import datetime
import os
import wave
import time
import pygame
import speech_recognition as sr
from gtts import gTTS
from tkinter import Tk, scrolledtext, Button, messagebox
from tkinter import filedialog as fd

# Server address and port
SERVER_ADDRESS = 'localhost'
SERVER_PORT = 5000

# GUI window for the server
server_window = Tk()
server_window.title("Server")

# Text box to display received text messages
text_box = scrolledtext.ScrolledText(server_window, width=40, height=10)
text_box.pack()

# Create a socket object
client_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Function to establish connection with client
def start_server():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = (SERVER_ADDRESS, SERVER_PORT)
    sock.bind(server_address)
    sock.listen(1)

    while True:
        print(f"[{get_timestamp()}] Waiting for a connection...")
        connection, client_address = sock.accept()
        print(f"[{get_timestamp()}] Connection established between client {client_address} and server {SERVER_ADDRESS}")
        messagebox.showinfo("Connection", f"Connection established between client {client_address} and server {SERVER_ADDRESS}")

        # Handle client in a separate thread
        client_thread = threading.Thread(target=handle_client, args=(connection, client_address))
        client_thread.start()

# Function to handle client requests
def handle_client(connection, client_address):
    while True:
        try:
            data = connection.recv(1024)
            if not data:
                break

            # Received text message
            text_message = data.decode()
            print(f"[{get_timestamp()}] Received text message from {client_address}: {text_message}")
            text_box.insert('end', f"[{get_timestamp()}] {text_message}\n")
            text_to_speech(text_message)

            # Delay before playing audio
            time.sleep(2)

            # Received audio recording
            if text_message.endswith(".wav"):
                save_audio_recording(data)
                transcribe_audio()
        except:
            break

    connection.close()
    print(f"[{get_timestamp()}] Client {client_address} disconnected")

# Function to save audio recording
def save_audio_recording(data):
    timestamp = datetime.datetime.now().strftime("%H%M%S_%d%m%Y")
    filename = f"ReceivedAudioRecordings/{timestamp}_voice_recording.wav"
    if not os.path.exists("ReceivedAudioRecordings"):
        os.makedirs("ReceivedAudioRecordings")

    with wave.open(filename, 'wb') as file:
        file.setnchannels(1)
        file.setsampwidth(2)
        file.setframerate(44100)
        file.writeframes(data)

# Function to transcribe audio using speech recognition
def transcribe_audio():
    recent_file = get_recent_audio_file()
    if recent_file:
        r = sr.Recognizer()
        with sr.AudioFile(recent_file) as source:
            audio = r.record(source)
        try:
            text = r.recognize_google(audio)
            print(f"[{get_timestamp()}] Transcribed text: {text}")
            with open("TranscribedText/transcribed_text.txt", 'a') as file:
                file.write(text + "\n")
        except sr.UnknownValueError:
            print(f"[{get_timestamp()}] Speech Recognition could not understand audio")
        except sr.RequestError as e:
            print(f"[{get_timestamp()}] Error in Speech Recognition service: {e}")

# Function to get the most recent audio file
def get_recent_audio_file():
    if not os.path.exists("ReceivedAudioRecordings"):
        return None
    files = os.listdir("ReceivedAudioRecordings")
    if len(files) == 0:
        return None
    files.sort(key=lambda x: os.path.getmtime(os.path.join("ReceivedAudioRecordings", x)))
    return os.path.join("ReceivedAudioRecordings", files[-1])

# Function for text-to-speech conversion
def text_to_speech(text):
    tts = gTTS(text)
    tts.save("temp_audio.mp3")
    pygame.mixer.init()
    pygame.mixer.music.load("temp_audio.mp3")
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

# Function to get timestamp in the specified format
def get_timestamp():
    return datetime.datetime.now().strftime("%H:%M:%S_%d%b%y")

# Button to browse and send .txt files
def browse_and_send_text_files():
    file_path = fd.askopenfilename(initialdir="/", title="Select a Text File", filetypes=(("Text Files", "*.txt"), ("All Files", "*.*")))
    if file_path:
        send_text_file(file_path)

# Function to send a .txt file to the client
def send_text_file(file_path):
    with open(file_path, 'rb') as file:
        data = file.read()
    client_sock.sendall(data)
    messagebox.showinfo("File Sent", f"The file {os.path.basename(file_path)} has been sent to the client")

# Button to browse and play .wav files
def browse_and_play_audio_files():
    file_path = fd.askopenfilename(initialdir="/", title="Select a WAV File", filetypes=(("WAV Files", "*.wav"), ("All Files", "*.*")))
    if file_path:
        play_audio_file(file_path)

# Function to play a .wav file locally
def play_audio_file(file_path):
    pygame.mixer.init()
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

# Button to browse and send canned text messages
def browse_and_send_canned_messages():
    file_path = fd.askopenfilename(initialdir="/", title="Select a Text File", filetypes=(("Text Files", "*.txt"), ("All Files", "*.*")))
    if file_path:
        send_canned_messages(file_path)

# Function to send canned text messages to the client
def send_canned_messages(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    for line in lines:
        client_sock.sendall(line.encode())
        time.sleep(2)  # Delay between sending messages

# Button to browse and send canned audio recordings
def browse_and_send_canned_audio():
    file_path = fd.askopenfilename(initialdir="/", title="Select a WAV File", filetypes=(("WAV Files", "*.wav"), ("All Files", "*.*")))
    if file_path:
        send_canned_audio(file_path)

# Function to send canned audio recordings to the client
def send_canned_audio(file_path):
    with open(file_path, 'rb') as file:
        data = file.read()
    client_sock.sendall(data)

# Button to browse and send canned text files
def browse_and_send_canned_text_files():
    file_path = fd.askopenfilename(initialdir="/", title="Select a Text File", filetypes=(("Text Files", "*.txt"), ("All Files", "*.*")))
    if file_path:
        send_canned_text_file(file_path)

# Function to send canned text files to the client
def send_canned_text_file(file_path):
    with open(file_path, 'rb') as file:
        data = file.read()
    client_sock.sendall(data)

# Button to get the most recent text files
def get_recent_text_files():
    text_files = []
    if not os.path.exists("TranscribedText"):
        return text_files
    files = os.listdir("TranscribedText")
    files.sort(key=lambda x: os.path.getmtime(os.path.join("TranscribedText", x)), reverse=True)
    for file in files[:5]:
        with open(os.path.join("TranscribedText", file), 'r') as file:
            text_files.append(file.read())
    return text_files

# GUI button to browse and send text files
button_browse_text = Button(server_window, text="Browse and Send Text File", command=browse_and_send_text_files)
button_browse_text.pack()

# GUI button to browse and play audio files
button_browse_audio = Button(server_window, text="Browse and Play Audio File", command=browse_and_play_audio_files)
button_browse_audio.pack()

# GUI button to browse and send canned messages
button_browse_canned_messages = Button(server_window, text="Browse and Send Canned Messages", command=browse_and_send_canned_messages)
button_browse_canned_messages.pack()

# GUI button to browse and send canned audio recordings
button_browse_canned_audio = Button(server_window, text="Browse and Send Canned Audio", command=browse_and_send_canned_audio)
button_browse_canned_audio.pack()

# GUI button to browse and send canned text files
button_browse_canned_text = Button(server_window, text="Browse and Send Canned Text File", command=browse_and_send_canned_text_files)
button_browse_canned_text.pack()

# GUI button to get the most recent text files
button_get_recent_text_files = Button(server_window, text="Get Recent Text Files", command=lambda: messagebox.showinfo("Recent Text Files", "\n".join(get_recent_text_files())))
button_get_recent_text_files.pack()

# Start the server
start_server()

# Run the server GUI window
server_window.mainloop()
